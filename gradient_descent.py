import numpy as np
import torch


device = 'cuda'  # 你的设备，例如 'cuda' 或 'cpu'

#MDH参数
alpha=[0,-np.pi/2,0,-np.pi,-np.pi/2,np.pi/2]
a=[0,0,368,316,0,0]
offset=[-3*np.pi/2,-np.pi/3,-np.pi/2,np.pi/2,np.pi/2,0]
d=[122,140.5,0,0,-102.5,94]
target=[-140.500000000000,-225.431631483788,568.540960636936]


# 将列表转换为张量
alpha_tensor = torch.tensor(alpha, requires_grad=True, dtype=torch.float32, device=device)
a_tensor = torch.tensor(a, requires_grad=True, dtype=torch.float32, device=device)
offset_tensor = torch.tensor(offset,requires_grad=True ,dtype=torch.float32, device=device)
d_tensor = torch.tensor(d,requires_grad=True,dtype=torch.float32, device=device)
target_tensor = torch.tensor(target,requires_grad=True,  dtype=torch.float32, device=device)
point_list=[]

def get_error(t1, t2, t3, t4, t5, t6,target_tensor):
    # #print(theate)
    theate=[]
    theate.append(t1 + offset_tensor[0])
    theate.append(t2 + offset_tensor[1])
    theate.append(t3 + offset_tensor[2])
    theate.append(t4 + offset_tensor[3])
    theate.append(t5 + offset_tensor[4])
    theate.append(t6 + offset_tensor[5])
    #print(theate)
    A06 = Aiv(alpha_tensor, a_tensor, d_tensor, theate)  # Aiv函数需要返回一个PyTorch张量

    return A06[0, 3]-target_tensor[0],A06[1, 3]-target_tensor[1],A06[2, 3]-target_tensor[2]


import torch
import sympy as sy

def MTi(alpha, a, d, theta, DHtype="MDH"):
    # x轴变化阵，右手系，顺针旋负方向
    Rx = torch.tensor([
        [1, 0, 0, 0],
        [0, torch.cos(alpha), -torch.sin(alpha), 0],
        [0, torch.sin(alpha), torch.cos(alpha), 0],
        [0, 0, 0, 1]
    ], requires_grad=True, dtype=torch.float32, device=device)

    # 沿着x轴平移，有方向
    Tx = torch.tensor([
        [1, 0, 0, a],
        [0, 1, 0, 0],
        [0, 0, 1, 0],
        [0, 0, 0, 1]
    ], requires_grad=True,dtype=torch.float32, device=device)

    # z轴旋转阵，右手系，顺针旋负方向
    Rz = torch.tensor([
        [torch.cos(theta), -torch.sin(theta), 0, 0],
        [torch.sin(theta), torch.cos(theta), 0, 0],
        [0, 0, 1, 0],
        [0, 0, 0, 1]
    ], requires_grad=True, dtype=torch.float32, device=device)

    # 沿着z轴平移，有方向
    Tz = torch.tensor([
        [1, 0, 0, 0],
        [0, 1, 0, 0],
        [0, 0, 1, d],
        [0, 0, 0, 1]
    ], requires_grad=True,dtype=torch.float32, device=device)

    return torch.mm(torch.mm(torch.mm(Rx, Tx), Rz), Tz)

def Aiv(alpha, a, d, offset, theta=[0, 0, 0, 0, 0, 0], Tnum=6):
    point_list = []  # 确保point_list在使用前定义
    base_point = torch.tensor([
        [0],
        [0],
        [0],
        [1]
    ],  requires_grad=True,dtype=torch.float32, device=device)

    for i in range(Tnum):
        Ti = MTi(alpha[i], a[i], d[i], offset[i])
        if i == 0:
            Ai = Ti
        else:
            Ai = torch.mm(Ai, Ti)
        point_list.append(torch.mm(Ai, base_point).tolist())  # 将张量转换为列表并添加到point_list
    return Ai


def loss_function_all(t1, t2, t3, t4, t5, t6, target):
    A06=[[6.12323399573677e-17*(-(-1.0*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + ((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) + 1.22464679914735e-16*torch.sin(t1 - 4.71238898038469)*torch.sin(t4 + 1.5707963267949))*torch.sin(t5 + 1.5707963267949) + 6.12323399573677e-17*(-1.0*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - ((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + 1.22464679914735e-16*torch.sin(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) - 1.0*(-1.22464679914735e-16*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + 1.22464679914735e-16*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949) + 1.0*torch.sin(t1 - 4.71238898038469))*torch.cos(t5 + 1.5707963267949))*torch.sin(t6) + ((-1.0*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + ((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) + 1.22464679914735e-16*torch.sin(t1 - 4.71238898038469)*torch.sin(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) + 6.12323399573677e-17*(-1.0*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - ((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + 1.22464679914735e-16*torch.sin(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949))*torch.sin(t5 + 1.5707963267949) - 1.0*(-1.22464679914735e-16*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + 1.22464679914735e-16*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949) + 1.0*torch.sin(t1 - 4.71238898038469))*torch.sin(t5 + 1.5707963267949))*torch.cos(t6) + 1.0*(-1.0*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.0*((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 7.49879891330929e-33*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + 7.49879891330929e-33*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949) + 1.22464679914735e-16*torch.sin(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949) + 6.12323399573677e-17*torch.sin(t1 - 4.71238898038469))*torch.sin(t6), 6.12323399573677e-17*(-(-1.0*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + ((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) + 1.22464679914735e-16*torch.sin(t1 - 4.71238898038469)*torch.sin(t4 + 1.5707963267949))*torch.sin(t5 + 1.5707963267949) + 6.12323399573677e-17*(-1.0*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - ((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + 1.22464679914735e-16*torch.sin(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) - 1.0*(-1.22464679914735e-16*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + 1.22464679914735e-16*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949) + 1.0*torch.sin(t1 - 4.71238898038469))*torch.cos(t5 + 1.5707963267949))*torch.cos(t6) - ((-1.0*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + ((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) + 1.22464679914735e-16*torch.sin(t1 - 4.71238898038469)*torch.sin(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) + 6.12323399573677e-17*(-1.0*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - ((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + 1.22464679914735e-16*torch.sin(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949))*torch.sin(t5 + 1.5707963267949) - 1.0*(-1.22464679914735e-16*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + 1.22464679914735e-16*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949) + 1.0*torch.sin(t1 - 4.71238898038469))*torch.sin(t5 + 1.5707963267949))*torch.sin(t6) + 1.0*(-1.0*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.0*((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 7.49879891330929e-33*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + 7.49879891330929e-33*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949) + 1.22464679914735e-16*torch.sin(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949) + 6.12323399573677e-17*torch.sin(t1 - 4.71238898038469))*torch.cos(t6), -6.12323399573677e-17*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 6.12323399573677e-17*((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 4.59169004331693e-49*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + 4.59169004331693e-49*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949) + 1.0*(-1.0*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + ((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) + 1.22464679914735e-16*torch.sin(t1 - 4.71238898038469)*torch.sin(t4 + 1.5707963267949))*torch.sin(t5 + 1.5707963267949) - 6.12323399573677e-17*(-1.0*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - ((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + 1.22464679914735e-16*torch.sin(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) + 1.0*(-1.22464679914735e-16*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + 1.22464679914735e-16*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949) + 1.0*torch.sin(t1 - 4.71238898038469))*torch.cos(t5 + 1.5707963267949) + 7.49879891330929e-33*torch.sin(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949) + 3.74939945665464e-33*torch.sin(t1 - 4.71238898038469), 102.5*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) + 102.5*((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + 7.68626888614202e-31*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + 316*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + 316*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949) - 7.68626888614202e-31*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949) + 94.0*(-1.0*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + ((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) + 1.22464679914735e-16*torch.sin(t1 - 4.71238898038469)*torch.sin(t4 + 1.5707963267949))*torch.sin(t5 + 1.5707963267949) - 5.75583995599256e-15*(-1.0*(-(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - ((-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + (-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + 1.22464679914735e-16*torch.sin(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) + 94.0*(-1.22464679914735e-16*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + 1.22464679914735e-16*(-6.12323399573677e-17*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) - torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949) + 1.0*torch.sin(t1 - 4.71238898038469))*torch.cos(t5 + 1.5707963267949) - 2.25335011043113e-14*torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) - 1.25526296912604e-14*torch.sin(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949) - 140.5*torch.sin(t1 - 4.71238898038469) + 368*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966)], [(6.12323399573677e-17*(-((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.22464679914735e-16*torch.cos(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949))*torch.sin(t5 + 1.5707963267949) + (((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 1.22464679914735e-16*torch.sin(t4 + 1.5707963267949)*torch.cos(t1 - 4.71238898038469))*torch.cos(t5 + 1.5707963267949) - 1.0*(1.22464679914735e-16*(-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - 1.22464679914735e-16*(torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t1 - 4.71238898038469))*torch.sin(t5 + 1.5707963267949))*torch.cos(t6) + 6.12323399573677e-17*(6.12323399573677e-17*(-((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.22464679914735e-16*torch.cos(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) - (((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 1.22464679914735e-16*torch.sin(t4 + 1.5707963267949)*torch.cos(t1 - 4.71238898038469))*torch.sin(t5 + 1.5707963267949) - 1.0*(1.22464679914735e-16*(-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - 1.22464679914735e-16*(torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t1 - 4.71238898038469))*torch.cos(t5 + 1.5707963267949))*torch.sin(t6) + 1.0*(-1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) + 7.49879891330929e-33*(-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - 7.49879891330929e-33*(torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949) - 1.22464679914735e-16*torch.cos(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949) - 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469))*torch.sin(t6), -(6.12323399573677e-17*(-((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.22464679914735e-16*torch.cos(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949))*torch.sin(t5 + 1.5707963267949) + (((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 1.22464679914735e-16*torch.sin(t4 + 1.5707963267949)*torch.cos(t1 - 4.71238898038469))*torch.cos(t5 + 1.5707963267949) - 1.0*(1.22464679914735e-16*(-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - 1.22464679914735e-16*(torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t1 - 4.71238898038469))*torch.sin(t5 + 1.5707963267949))*torch.sin(t6) + 6.12323399573677e-17*(6.12323399573677e-17*(-((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.22464679914735e-16*torch.cos(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) - (((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 1.22464679914735e-16*torch.sin(t4 + 1.5707963267949)*torch.cos(t1 - 4.71238898038469))*torch.sin(t5 + 1.5707963267949) - 1.0*(1.22464679914735e-16*(-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - 1.22464679914735e-16*(torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t1 - 4.71238898038469))*torch.cos(t5 + 1.5707963267949))*torch.cos(t6) + 1.0*(-1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) + 7.49879891330929e-33*(-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - 7.49879891330929e-33*(torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949) - 1.22464679914735e-16*torch.cos(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949) - 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469))*torch.cos(t6), -6.12323399573677e-17*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 6.12323399573677e-17*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) + 4.59169004331693e-49*(-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - 4.59169004331693e-49*(torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949) - 6.12323399573677e-17*(-((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.22464679914735e-16*torch.cos(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) + 1.0*(((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 1.22464679914735e-16*torch.sin(t4 + 1.5707963267949)*torch.cos(t1 - 4.71238898038469))*torch.sin(t5 + 1.5707963267949) + 1.0*(1.22464679914735e-16*(-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - 1.22464679914735e-16*(torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t1 - 4.71238898038469))*torch.cos(t5 + 1.5707963267949) - 7.49879891330929e-33*torch.cos(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949) - 3.74939945665464e-33*torch.cos(t1 - 4.71238898038469), 102.5*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + 102.5*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) + 316*(-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) - 7.68626888614202e-31*(-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) + 7.68626888614202e-31*(torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949) + 316*(torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949) - 5.75583995599256e-15*(-((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.22464679914735e-16*torch.cos(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) + 94.0*(((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.sin(t3 - 1.5707963267949) + (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.0*((-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - (torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) - 1.22464679914735e-16*torch.sin(t4 + 1.5707963267949)*torch.cos(t1 - 4.71238898038469))*torch.sin(t5 + 1.5707963267949) + 94.0*(1.22464679914735e-16*(-torch.sin(t1 - 4.71238898038469)*torch.sin(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.cos(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966))*torch.cos(t3 - 1.5707963267949) - 1.22464679914735e-16*(torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 6.12323399573677e-17*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469))*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t1 - 4.71238898038469))*torch.cos(t5 + 1.5707963267949) + 368*torch.sin(t1 - 4.71238898038469)*torch.cos(t2 - 1.0471975511966) + 2.25335011043113e-14*torch.sin(t2 - 1.0471975511966)*torch.cos(t1 - 4.71238898038469) + 1.25526296912604e-14*torch.cos(t1 - 4.71238898038469)*torch.cos(t4 + 1.5707963267949) + 140.5*torch.cos(t1 - 4.71238898038469)], [6.12323399573677e-17*(-(-1.0*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + (-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.cos(t4 + 1.5707963267949) - 7.49879891330929e-33*torch.sin(t4 + 1.5707963267949))*torch.sin(t5 + 1.5707963267949) + 6.12323399573677e-17*(-1.0*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - (-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.sin(t4 + 1.5707963267949) - 7.49879891330929e-33*torch.cos(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) - 1.0*(1.22464679914735e-16*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.22464679914735e-16*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 6.12323399573677e-17)*torch.cos(t5 + 1.5707963267949))*torch.sin(t6) + ((-1.0*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + (-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.cos(t4 + 1.5707963267949) - 7.49879891330929e-33*torch.sin(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) + 6.12323399573677e-17*(-1.0*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - (-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.sin(t4 + 1.5707963267949) - 7.49879891330929e-33*torch.cos(t4 + 1.5707963267949))*torch.sin(t5 + 1.5707963267949) - 1.0*(1.22464679914735e-16*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.22464679914735e-16*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 6.12323399573677e-17)*torch.sin(t5 + 1.5707963267949))*torch.cos(t6) + 1.0*(-1.0*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.0*(-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.sin(t4 + 1.5707963267949) + 7.49879891330929e-33*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 7.49879891330929e-33*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 7.49879891330929e-33*torch.cos(t4 + 1.5707963267949) - 3.74939945665464e-33)*torch.sin(t6), 6.12323399573677e-17*(-(-1.0*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + (-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.cos(t4 + 1.5707963267949) - 7.49879891330929e-33*torch.sin(t4 + 1.5707963267949))*torch.sin(t5 + 1.5707963267949) + 6.12323399573677e-17*(-1.0*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - (-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.sin(t4 + 1.5707963267949) - 7.49879891330929e-33*torch.cos(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) - 1.0*(1.22464679914735e-16*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.22464679914735e-16*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 6.12323399573677e-17)*torch.cos(t5 + 1.5707963267949))*torch.cos(t6) - ((-1.0*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + (-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.cos(t4 + 1.5707963267949) - 7.49879891330929e-33*torch.sin(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) + 6.12323399573677e-17*(-1.0*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - (-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.sin(t4 + 1.5707963267949) - 7.49879891330929e-33*torch.cos(t4 + 1.5707963267949))*torch.sin(t5 + 1.5707963267949) - 1.0*(1.22464679914735e-16*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.22464679914735e-16*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 6.12323399573677e-17)*torch.sin(t5 + 1.5707963267949))*torch.sin(t6) + 1.0*(-1.0*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 1.0*(-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.sin(t4 + 1.5707963267949) + 7.49879891330929e-33*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 7.49879891330929e-33*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 7.49879891330929e-33*torch.cos(t4 + 1.5707963267949) - 3.74939945665464e-33)*torch.cos(t6), -6.12323399573677e-17*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - 6.12323399573677e-17*(-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.sin(t4 + 1.5707963267949) + 1.0*(-1.0*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + (-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.cos(t4 + 1.5707963267949) - 7.49879891330929e-33*torch.sin(t4 + 1.5707963267949))*torch.sin(t5 + 1.5707963267949) - 6.12323399573677e-17*(-1.0*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - (-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.sin(t4 + 1.5707963267949) - 7.49879891330929e-33*torch.cos(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) + 1.0*(1.22464679914735e-16*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.22464679914735e-16*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 6.12323399573677e-17)*torch.cos(t5 + 1.5707963267949) + 4.59169004331693e-49*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 4.59169004331693e-49*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 4.59169004331693e-49*torch.cos(t4 + 1.5707963267949) - 2.29584502165847e-49, 102.5*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) + 102.5*(-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.sin(t4 + 1.5707963267949) + 94.0*(-1.0*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.sin(t4 + 1.5707963267949) + (-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.cos(t4 + 1.5707963267949) - 7.49879891330929e-33*torch.sin(t4 + 1.5707963267949))*torch.sin(t5 + 1.5707963267949) - 5.75583995599256e-15*(-1.0*(1.0*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.0*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949))*torch.cos(t4 + 1.5707963267949) - (-1.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 1.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966))*torch.sin(t4 + 1.5707963267949) - 7.49879891330929e-33*torch.cos(t4 + 1.5707963267949))*torch.cos(t5 + 1.5707963267949) + 94.0*(1.22464679914735e-16*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 1.22464679914735e-16*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 6.12323399573677e-17)*torch.cos(t5 + 1.5707963267949) - 7.68626888614202e-31*torch.sin(t2 - 1.0471975511966)*torch.sin(t3 - 1.5707963267949) - 316.0*torch.sin(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) - 368.0*torch.sin(t2 - 1.0471975511966) - 316.0*torch.sin(t3 - 1.5707963267949)*torch.cos(t2 - 1.0471975511966) + 7.68626888614202e-31*torch.cos(t2 - 1.0471975511966)*torch.cos(t3 - 1.5707963267949) + 7.68626888614202e-31*torch.cos(t4 + 1.5707963267949) + 122.0], [0, 0, 0, 1]]


    loss = torch.sqrt((A06[0][3] - target[0])**2 +
                      (A06[1][3] - target[1])**2 +
                      (A06[2][3] - target[2])**2)
   # loss = torch.sqrt((t1+1)**2 +t2**2+t3**2+t4**2+t5**2+t6**2)
    return loss



if __name__=="__main__":
    dx,dy,dz=get_error(2.1372, 0.2629, 0.8672, 2.1497,-0.2768, 1.0,target_tensor)
    print(f'dx:{dx},dy:{dy},dz:{dz}')

    # 假设以下变量已经被定义
    j1, j2, j3, j4, j5, j6 = 1,2,2,3.14,1,1  # 你的变量
    device = 'cuda'  # 你的设备，例如 'cuda' 或 'cpu'
    lr =0.01  # 学习率
    #loss_function = ...  # 你的损失函数
    maxerror = 0.005  # 最大允许的误差
    interval =10000 # 优化的迭代次数

    # 创建张量并移动到指定设备
    t1 = torch.tensor([j1], requires_grad=True, dtype=torch.float32, device=device)
    t2 = torch.tensor([j2], requires_grad=True, dtype=torch.float32, device=device)
    t3 = torch.tensor([j3], requires_grad=True, dtype=torch.float32, device=device)
    t4 = torch.tensor([j4], requires_grad=True, dtype=torch.float32, device=device)
    t5 = torch.tensor([j5], requires_grad=True, dtype=torch.float32, device=device)
    t6 = torch.tensor([j6], requires_grad=True, dtype=torch.float32, device=device)

    # 优化器
    optimizer = torch.optim.Adam([t1, t2, t3, t4, t5, t6])


# 进行优化
    for epoch in range(interval):
        optimizer.zero_grad()  # 清空梯度
        loss = loss_function_all(t1, t2, t3, t4, t5, t6,target_tensor)  # 计算损失
        loss.backward()  # 反向传播
        optimizer.step()  # 更新参数
        if epoch % 100 == 0:
            print(f'Epoch {epoch}, Loss {loss.item()},t{[t1, t2, t3, t4, t5, t6]}',)
        if loss.item() < maxerror:
            print("minloss:", loss.item())
            break
    dx,dy,dz=get_error(t1, t2, t3, t4, t5, t6,target_tensor)
    print(f'dx:{dx},dy:{dy},dz:{dz}')










